#Tasks


7/17

build PROCESSES!
    well documented
    well tested
    that work together

writevid1.py | fbf2.py  | fdiff1.py

need a summary utility to display file-size, recording-length, frame-size, etc..
    and this should run like 'ls' for all files in directory
need a comparison in size of vid and size of frame between different encoding schemes
need a module for writing a video
need a module for displaying a video

[x] how to eliminate the "windows popup" codec request before writevid1 runs?
    appears to happen for .avi but not h264
    does it happen on mp4?

[ ] need to be able to record different size vids in writevid.py
[ ] set different frame rates
    [ ] verify different frame rates

[ ] get cv2 intellisense in vscode
    [x] it works in ipython
[x] why can't I write out h264 in fdiff1?
    because theres no h264.dll on /data/ path
    [x] try from main ppd/ path - yes, works
    [ ] what happens when you import modules

Modules:
[ ] build unique-fn module
[ ] build a set cam params module
[ ] build a show video with time-sleep lag

Scripts:
[ ] build a vid probe util
[ ] build a help function for each script
[ ] build a current_params script which writes current-default-meta-data to meta-data-db on writevid1
[ ] commands.txt becomes a way to run multiple scripts together
[ ] rewrite fbf

Analysises:
[ ] relative size of different codecs
    [ ] for arbitrary videos
    [ ] for vids with just a moving ball
    [ ] half-way between: a person moving and a ball bouncing
    [ ] what does the rpi send best?

Smaller Tasks:
[x] import vidwriter:VidWriter into main scripts
[ ] get all the available codecs by prompt then VidWriter.getcodec()
[ ] variable framesize for videowriter
[ ] uniqueFn implement ext=None

[ ] Try Codecs
    [ ] XVID
    [ ] mp4
    [ ] MJPG
    [ ] Lossless

[x] organize video data
[ ] sync data folder with drive

[ ] how to use cursor on opencv windows?
    [ ] to select a region, see fast-tracking video example
    [ ] to select a region to zoom

[x] try out test_vid_sizes
For all three cameras (laptop 1 + 2) & webcam (c920):
(640, 480)   True
(1280, 720)   True
(1280, 960)   False
(1920, 1080)   True

Idea: _CVT_ the fdiff frames to a color close to the ball, then do a diff
        which will let us maximize the diff for only the ball
  





7/9

I need to build a list of tasks and start executing:
I want an example of laptop/pi picture working
then I really want to test that optical flow thing
This seems helpful: fast tracking in opencv
    https://www.youtube.com/watch?v=X6rPdRZzgjg
    https://github.com/osmaa/pinymotion/blob/master/pinymotion.py

Questions:
how to play .avi's?
how to play h264's?
how to send h264/other-format over stream?




General Thoughts:
This is a process problem, not a beautiful code problem. Since we don't know how the solution looks at the beginning, we need the processes to iterate there.

Remember, the idea was to use two cameras for mo-cap: one for noticing diffs quickly, the other for precisely locating ball


Worskapce Discoveries:
notes/commands.txt has pi-server instructions
notes/notes-dec.txt has concise and useful info


7/7

build high-level todos
re-run and record main commands

High Level Todos:

Need to build a script that saves videos
Need to create a variety of videos:
    very distant ball
    bouncing ball, 
        different backgrounds
        different fps
    different cameras
    different cam params
Need to create meta data for each recording
Need to build library of videos and frames
A way to run algos onto all test-vids
Need to create unit tests for functionality?
Build a sqlite db that stores settings for thresh levels
    and track-algo params
Do a bunch of exploratory analysis beyond simple-thresh
    optical flow
    edge detection
    circle recognition
Rethink the approach to bounding box: create a circle and add
the area not included as color to absorb
"Find some positive": expand the thresh range to search for a 
small ball

Common Commands:
how to connect ot rpi over socket?
what flags make a difference on adaptive_thresh
fbf works? is valuable tho?


12/17

x Picamera working without errors
doesnt timeout here:
    Traceback (most recent call last):
    File "adaptive_thresh.py", line 314, in <module>
        main()
    File "adaptive_thresh.py", line 126, in main
        vc = initCam('pi_cam')
    File "C:\Users\wsutt\Desktop\files\ppd\ppd\modules\Camera.py", line 51, in initCam
        return MyPiCamera()
    File "C:\Users\wsutt\Desktop\files\ppd\ppd\modules\Camera.py", line 18, in __init__
        self.connection = self.server_socket.accept()[0].makefile('rb')
    File "C:\Python27\lib\socket.py", line 206, in accept
        sock, addr = self._sock.accept()
    KeyboardInterrupt
Picamera init cmd arg
Picamera set params
Picamera rotate controls
Picamera as a secondary camera

print FPS to cmdline



12/16

check the individual times of streaming. Can you read more quickly right at the beginning?

dont print out, does that save time?

x can we read faster if we skip processing? kinda not

different thread to read and record?

Add the streaming to adaptive_thresh


12/16

x Create a git basecamp

x Find a way to ftp or scp from laptop -> rpi
    got filezilla 3.29
    sitemanager:
        use port 22
        saved as pi_wifi_1

x Verfiy camera.capture_sequence speed
x    extend to verify the final image is saved
x    verfied at 29.5 fps, using video port, 640

x Can you  get a faster capture_sequence ?
x    by altering fps and exposure? YES but FOV is limited.
        at request 60fps, we get 58
            Captured 120 images at 58.63fps
            10.0.0.123 - - [16/Dec/2017 19:15:42] "GET /take6/ HTTP/1.1" 200 -

     by threading?

x add an argparse for client

x Verfiy Ethernet throughput speed

Build a bach script for ops
    workon cv
    export FLASK_APP=camera-server.py
    flask run --host=0.0.0.0

Build simple recipes and benchmarks collection
    send an already saved image
        wifi vs ethernet
    send a bunch of tiny images
        wifi vs ethernet
    
    basic responses
        send text
        send img
        send a stream
        send data in the url

    build a global Camera class in camera-server.py
        configure requests
        and capture requests

Find a way to do X11 on pi


12/12
https://stackoverflow.com/questions/29065624/using-with-inside-a-thread-in-python-picamera-opencv

12/10

why doesnt iterThreshA change for RGB on set_thresh decrease? But HSV does?

try simple flask on rpi, record time
    local server time
    ethernet connected time
    compare against SimpleHTTPServer

how to get flask threaded=True to run?


12/8

x add options for camera capture size
x add filecam
x add outer loop to reset camera
x dont mirror camera_usb=1
record a video
write a small utility that calculates fps from time in video


12/2

x find all camera sizes
x hello world on the pi-camera

12/1

working well at 10 feet
1280p
rgb: (orange ball) [  0  96 192] [ 88 232 255]
blur 11, repair 2

green sharpie:  [ 15 106  86] [ 81 171 148]

increasing thresh_pct > 0.95 helps with motion blur

11/24

x agenda nextstep triggers them all - sw_ not reset?, or gui firing too much?
x test and debug agenda reset
x it does create a new folder in write_dir for each agenda
x does it reset for a new color ball? yes.
x it takes the first img after reset from the last old_pos for tracking_frame
x two pictures from initial center_tracking frame, make it one
x set the gui from a output_rgb_set
x extend to hsv
x refactor globeGui
x refactor gui to eliminate extraneous
x print output as values
x little wider display
x update gui-hsv-output after runIterThreshA
x verify that thresh_pct is different
x better printout for solves
x less verbose
x have outcome stats display
x Proof-of-Concept: do iterThresh with 1 training image, then multiple training images
x better perf? - yes
x at least wider thresh? -yes
x call iterThreshB from gui
x tracking params from gui
x agenda.combine_threshes: transformA(img.copy(), blur = 1, b_hsv = True)

iterThreshB outputs initthresh? Not exactly but still seems sketchy

Show-How-Far-You-Can-See-Ball
x tracking success displayed to output
x display shows wide circle around putative ball
also diagnose iterThreshB on 
also display radius and num_of_cnts_found on display

Most important:

    Resize

    File_Cam


Can do an iterthreshB agenda creating a mask where there are FP's?

do the tracking without resize
find a way to know if it sees anything and what width?
    "is it seeing the ball way out there? What's the furthest it can see the ball?"




x take off delay for startup
x preview-display horizontal mirroring
x display other types of images  -> 2x cv windows?
x hist for the rect
x background histos
x flip transformed image
x params for adapt thresh
x options
x proc histo only onshow
x change frame and get histo
x show background_histos
x adaptive y_lim
x why doesnt the hard coded y_hi change for 6th plot?
x make subplot 2 by 3 not 1 by 6
x make a reset of current_tracking_frame force a resize in histos
x display a transform window
x organize function to imports
x pull out np.histogram from updating function
x large blocks to functions
x ptions to a function
x global modify from options-func
x display transform and mask as smaller
x need to get globals set in Options
x pause on a picture for searching for thresh_params
x write-out pics
x write rect non-transform
x write all to same dir
x write other pics
x frame isnt copied?  

tranform and regular img track

do a np.histo work on n
threshold pct array
expand and contract threshold

waitkey switch statement
write out video
print in raw_input with carriage return
histo labeled hsv for hsv histos
options for backghisto
do a thresh on each histo
display info in histo title

adapt_thresh for saved videos
eval in options
3rd rgb-plot-pane rect before vs. current "background before ball was there"
search_thresh
do agenda
zeromq messaging for log
run on pi

#Questions

Q does a switch statement make waitkey more responsive?
Q resolve ugly globals code
Q organize imports to and classes

> python adaptive_thresh.py --showbackghisto --showhisto

> set_thresh 80 100 100 130 200 200
150 130 90 200 210 200
100 130 90 200 210 200
0 130 90 100 210 200

speed up histo proc:
    keep it all numpy
    only when updating
    create tests, test data


#Questions

Locate / Track 
    -  how many shapes are there?

#Notes

why current LiveHist is bad
    matplotlib window can't be moved after startup
    makes peview-display jittery
        could this be solved with threading?
    makes cvWaitkeys not responsive

    solution is an html/js app in browser with http interface

