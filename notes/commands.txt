11/25

    >python AnalysisHelpers.py --subprocColorPlot  [from modules/]

        displays a ColorCube in a separate window based on last saved data
        in interproc_colorplot.db

        press 'o': to output view-position to interproc_colorplot.db

        can just intermittently delete: data/usr/interproc_colorplot.db 
        to keep data size in check

        --dbpathfn [PATH-TO-DB] allows us isolate the graph in question to
        a specific book analysis

10/9

    >python guiview.py --track --scoreoff


10/1

    to view scored video frames:
    
    >python guiview.py --file x/x/output4.proc2.avi --showscoring

9/24

    to record perFrame data into a processed video
    >open: notes/guiview.jsonc  and edit+save

        or use --framelog x/x/guiview-jsonc: to specify a dif json template
    
    to view updated .metalog for processed video, run:
    > tail -f x/x/outputX.metalog -n 10
    
    debugging guiview in vscode:
        option1 - run with gui:
            set only breakpoints within a method "cmd_" of GuiConstructor
            pause the program with a gui action
            (don't set breaks in main-thread before ui-thread gets stopped)
            then when the GuiC thread stops
            you can continue to step in main-thread; ui-thread will resume;
            and main-thread won't have updated globals values

        option2 - run without gui; set breaks before launch
            >python --file x/x/out1.avi --nogui
            on pause, enter cmds via debug console, e.g.
            >g.play=True

    debugging guiview_test:
        run the program with a specified --test <test_str> and --nogui; set breaks before launch
        >python guiview --file data/test/test_name/out1.avi --test test_name --nogui

9/21

    To test guiview:
    [in test/]
        >pytest guiview_test.py -vv

    To help build a test, run guiview with the test flag

9/19

>python guirecord.py -- dir data/folder/ --preload --firstN 20

    --preload: allows rewind, but bad for long vids

    --firstN: only plays first N frames of each vid; quick summary

    defaults for --dir:
    --nodelay:  frames play fast; not accurate time

    focus on opencv window and press 'q' to quit that video; on to next

>python guirecord.py --file data/folder/output1.avi

    defaults for --file:
    --preload
    


>python guirecord.py --file data
9/18

use: notes/guirecord.jsonc in notepad++ with
    >python guirecord.py 

    edit the file to reflect the video being recorded

9/17

[to experiment with framerate / camera buffer]
>python guirecord.py --sleepschedule
>python guirecord.py --sleepschedule --funkyread    

>python timelog.py --file output8.txt --graph

9/12

>python timelog.py --file data/sept2018/misc/output7.txt --skip 0

>python timelog.py --file data/sept2018/misc/output7.txt --skip 10 --hz

>python timelog.py --file output8.txt --filtervar recordOn --filterval False
>python timelog.py --file output8.txt --filtervar frameSizeEnum --filterval 2

8/2

>python guirecord.py
>python modules/guib.py   [to test guiB w/o guirecord]

>pytest -vv writevid1.py
>pytest -vv miscutils.py
>pytest -vv vidwriter.py


7/18

>python test_video_sizes.py --cam_num 0

For all three cameras (laptop 1 + 2) & webcam (c920):
(640, 480)      True
(1280, 720)     True
(1280, 960)     False
(1920, 1080)    True

d>python writevid1.py --framesize 1280,720 --showsize


7/17

>python fdiff1.py --file data/july2018/training_july16/cv_laptop_green.avi --show --save

>python writevid1.py --savedir data/misc/

>pytest -vv miscutils.py

>pytest -vv vidwriter.py

12/16

[on laptop]
    >python laptop-server.py --noprint

[in putty on pi]
    >python pi-client.py --videoport --ip 169.254.80.108  --nodisplay --silenttimer --runtime 30 --bigger


12/10

[on rpi; in bash]
>workon cv
    (gets us cv2 virtualenv)

rpi -> laptop [4.4MB jpg]
over wifi
time:  0.0340001583099

broken pipe on flask server: need to uprgrade to wsgi of gunicorn:
    https://stackoverflow.com/questions/37962925/flask-app-get-ioerror-errno-32-broken-pipe
    https://stackoverflow.com/questions/12591760/flask-broken-pipe-with-requests


a 1 second latency on flask:
https://stackoverflow.com/questions/11150343/slow-requests-on-local-flask-server

    this is eliminated by specifying the ip explicitly instead of "localhost" in url:
        C:\Users\wsutt\Desktop\files\ppd\ppd\scratch>python client1.py
    ->  time:  0.00799989700317  [for whole 4mb image]
        bytes img_a:  9037043
        bytes img_a2:  9037043
        img_b shape:  (2464, 3280, 3)
        getsizeof img_b:  24245824
        time:  9.28199982643

ffmpeg:    
C:\Users\wsutt\Downloads\ffmpeg-20171209-f20c8f6-win64-static\bin>ffmpeg -f h264 -i ../../60secondvid.h264  ../../60test.mp4

using flask render_template, chrome browser:
4.2MB JPG in 312ms

using using flask send_file, python requests
1.0 secs

[from git bash]
export FLASK_APP=flask-server.py
flask run [--host=0.0.0.0 (this enables outside access)]

python client1.py

12/9

raspivid -w 640 -h480 -fps 30 -o 60secondvid.h264 -t 60000

on the rpi >ifconfig  (under eth0)
169.254.11.244
and it pings from laptop

Ethernet
Autoconfiguration IPv4 Address. . : 169.254.80.108(Preferred)

192.168.56.255        ff-ff-ff-ff-ff-ff     static

Wifi IP
IPv4 Address. . . . . . . . . . . : 10.0.0.123(Preferred)

>pscp pi@10.0.0.129:Desktop/camera1/vid1.h264 myvid.h264
pscp pi@192.168.43.243:Desktop/camera1/vid1.h264 myvid.h264

12/8

>python adaptive_thresh.py --agenda --filecam output5.avi --fps_hz 20


12/2

>python test_vid_sizes.py --cam_num 0

raspistill [-rot 270] [-vf] [-hf] -t 0 -p 200,200,640,480 -w 640 -h 480


12/1

>python writevid1.py --showvid --time 10

>python fbf2.py --file output2.avi --interactive



Example for writing out a book
    python fbf2.py --file t6/ss5000.h264 --writebook --writebookinfo --interactive --reporting

    add:
        --printframes
        --refresh 1000 (for slow play)
        --picsize width,300 (comma seperated for width="300px" attr in book's-img)
        --writebookvid  can use 'e' to output a video too

Example with new data directories
    python fbf2.py --file data/read/tc/ss5000.h264 --writepath data/write/example1 --createfile --picsubdir --writebook --writebookinfo --writebookvid --interactive --reporting


Keyboard Commands

    d:      pause/play 
    a / s:  back a frame / forward a frame
    w:      write the current frame
    e:      write the current frame, advance a frame
    o:      options, on cmd line
        
        quit                    quit opt
        newbook [bookname]      new output book
        resetbook               dont record prev saved imgs
        newvideo                writes to a new videofile


Example for tracking
    python fbf2.py --file outvid6.h264 --writebook --writebookinfo --interactive --reporting --track