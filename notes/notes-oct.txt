10/24

        Repair intellisense
        
        get b_thresh_xxx into args

        AgendaBase class which can be inherited by A, B, etc

        Need that GUI with real-time sliders
            quick toggle for now

        Track code modularized
            share track code with IterThresh


10/23

    x   randomize helpds increment thresh randomly between 6 choices,
        when all have a zero gradient

    gradient.randomize = True 
    [10.04998, 0.04998, [0, 88, 0], [76, 255, 106], 416.0]
    gradient.randomize = False
    [9.39425, 0.60575, [0, 85, 0], [75, 255, 100], 420.0]

10/22

    doing iterThreshB which makes threshold more lenient based on background-image

    Finally, need to do another Agenda element:
        - A box that records a quick video where the ball "always is", thus each frames
          should have a tracking success, helping us identify FalseNeg's
        - an iterThreshC that makes the threshold wider to satisfy any frames missing
        - these occur at different locations and different size bouding boxes
        - need a real time indicator if a frame is missed

        Could be image 9th's, 1 each

    And also an Agenda element that records a video where the ball never is, helping
    us identify FalsePositives

    Ultimately, this can lead to differnet threshes in different parts of the image

        for x/y there are segments, but also for "z", distance from camera ...

            applying mutliple_threses to image, then filtering for radius size
                e.g. small/distant balls have thresh_a 
                     and large/close balls have thresh_b

    

10/19

    Redo Iter7 using penalty as the criterion

        as a function of (radius_current (distance))
        "largest radius object | thresh-i"

    need to modularize the thresh function
    and the count

10/9

x   ScratchHist2 -> modules/IterThresh

    How to get intellisense for cv2?

    add a dedicated tests folder
    add a dedicated /data/tests/
                                /benchmarks
                                /assets
    
    Write more tests for IterThresh
    more tests for single clrs

    Cleanup iter7
    cleanup logging, from stdout printing, so it can be used in tests

    Develop iter7 further:
        penalty needs to not include intital px_inrange cutoff
        
        more standardized return value
        make threshLo threshHi print prettier


BUGS:

    x   single color shouldnt cutoff px_inrange 

    x   single color doesnt work correctly above clr0

    x   create a key to save the picture and do IterThresh

    x   do multiple iterThreshes

    x   pylinting is active in modules/Methods but not other files?

        ImgProcs.transformA applies a GaussianBlur as part of mask
        but iterThresh and histo do not use this transformed image
        Does ShowImages display a blurred hsv?

CMDS:

    >python adaptive_thresh.py --agenda --agendatimer

        this allows agenda to change rect every 3 seconds
        then it combines threshes at the end

TO-DO:

    x   example multi_thresh
        write and save rect files
        combine the rects

    x   add a timer after each keypress

            add the countdown time on annotations
            display all rect img's collected in html

    
    x    Add MultipleMasks: RGB and HSV
    x    find a way to combine masks in opencv layer
    x    Now, make agenda do a thresh for rgb and combine them



    Need evaluation of Thresh Module:
        A. Eval on static images
            1. TP and FN of captured rect_imgs
            2. TN and FP of img outside rect_img
                -> need a part of agenda that just does sample data

        B. Eval on live video of N-seconds:
            How many frames captured a ball out of total?
            How many frames captured a ball when there was none?
            -> this can go into fbf.py util to assess errors

    
    Add a way to assess how many objects are found in mask given the thresh
        -> allows

    add a console/ or gui that communicates without waitKey thrashing
    
    true gradient:
        only look back N spaces on x_i if current cheapest X is more advanced by 
        N-steps than x_i is
    
    

    add a unified way of calling into tests, resolving where data is, etc

