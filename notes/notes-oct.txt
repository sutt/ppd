10/9

x   ScratchHist2 -> modules/IterThresh

    How to get intellisense for cv2?

    add a dedicated tests folder
    add a dedicated /data/tests/
                                /benchmarks
                                /assets
    
    Write more tests for IterThresh
    more tests for single clrs

    Cleanup iter7
    cleanup logging, from stdout printing, so it can be used in tests

    Develop iter7 further:
        penalty needs to not include intital px_inrange cutoff
        
        more standardized return value
        make threshLo threshHi print prettier


BUGS:

    x   single color shouldnt cutoff px_inrange 

    x   single color doesnt work correctly above clr0

    x   create a key to save the picture and do IterThresh

    x   do multiple iterThreshes

    x   pylinting is active in modules/Methods but not other files?

        ImgProcs.transformA applies a GaussianBlur as part of mask
        but iterThresh and histo do not use this transformed image
        Does ShowImages display a blurred hsv?

CMDS:

    >python adaptive_thresh.py --agenda --agendatimer

        this allows agenda to change rect every 3 seconds
        then it combines threshes at the end

TO-DO:

    x   example multi_thresh
        write and save rect files
        combine the rects

    x   add a timer after each keypress

            add the countdown time on annotations
            display all rect img's collected in html

    
    x    Add MultipleMasks: RGB and HSV
    x    find a way to combine masks in opencv layer
    x    Now, make agenda do a thresh for rgb and combine them



    Need evaluation of Thresh Module:
        A. Eval on static images
            1. TP and FN of captured rect_imgs
            2. TN and FP of img outside rect_img
                -> need a part of agenda that just does sample data

        B. Eval on live video of N-seconds:
            How many frames captured a ball out of total?
            How many frames captured a ball when there was none?
            -> this can go into fbf.py util to assess errors

    
    Add a way to assess how many objects are found in mask given the thresh
        -> allows

    add a console/ or gui that communicates without waitKey thrashing
    
    true gradient:
        only look back N spaces on x_i if current cheapest X is more advanced by 
        N-steps than x_i is
    
    

    add a unified way of calling into tests, resolving where data is, etc

